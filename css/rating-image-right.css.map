{"version":3,"sources":["rating-image-right.scss","../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":";AAEA,sBAAsB,CAAC;EACrB,QAAQ,EAAE,QAAQ;EAClB,OAAO,EAAE,MAAM;EACf,UAAU,EAAE,OAAO;EACnB,MAAM,EAAE,kBAAkB;EAC1B,aAAa,EAAE,MAAM,GAwFtB;ECtBG,MAAM,EAAE,SAAS,EAAE,QAAQ;IDvE/B,sBAAsB,CAAC;MAQnB,OAAO,EAAE,CAAC,GAqFb;EAlFC,AAAC,iCAAW,CAAC;IACX,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,WAAW,EAAE,MAAM,GAKpB;ICoDC,MAAM,EAAE,SAAS,EAAE,QAAQ;MD5D7B,AAAC,iCAAW,CAAC;QAMT,OAAO,EAAE,KAAK,GAEjB;EAED,AAAC,+BAAS,CAAC;IACT,KAAK,EAAE,kBAAkB;IACzB,OAAO,EAAE,mBAAmB;IAC5B,QAAQ,EAAE,QAAQ,GAoCnB;ICWC,MAAM,EAAE,SAAS,EAAE,QAAQ;MDlD7B,AAAC,+BAAS,CAAC;QAMP,KAAK,EAAE,iBAAiB;QACxB,OAAO,EAAE,gBAAgB,GAgC5B;IAvCA,AAUC,+BAVQ,AAUP,OAAO,EAVT,+BAAS,AAWP,MAAM,CAAC;MACN,QAAQ,EAAE,QAAQ;MAClB,SAAS,EAAE,IAAI,GAChB;IAdF,AAgBC,+BAhBQ,AAgBP,OAAO,CAAC;MACP,OAAO,EAAE,IAAI;MACb,IAAI,EAAE,CAAC;MACP,GAAG,EAAE,CAAC,GAKP;MC0BD,MAAM,EAAE,SAAS,EAAE,QAAQ;QDlD5B,AAgBC,+BAhBQ,AAgBP,OAAO,CAAC;UAML,GAAG,EAAE,KAAK,GAEb;IAxBF,AA2BC,+BA3BQ,AA2BP,MAAM,CAAC;MACN,OAAO,EAAE,IAAI;MACb,KAAK,EAAE,CAAC;MACR,MAAM,EAAE,CAAC,GACV;IA/BF,AAiCC,+BAjCQ,CAiCR,CAAC,CAAC;MACA,SAAS,EAAE,IAAI;MACf,WAAW,EAAE,mBAAmB;MAChC,WAAW,EAAE,IAAI;MACjB,UAAU,EAAE,MAAM,GACnB;EAGH,AAAC,6BAAO,CAAC;IACP,KAAK,EAAE,KAAK,GAKb;ICGC,MAAM,EAAE,SAAS,EAAE,QAAQ;MDT7B,AAAC,6BAAO,CAAC;QAIL,KAAK,EAAE,IAAI,GAEd;EAED,AAAC,uCAAiB,CAAC;IACjB,SAAS,EAAE,KAAK;IAChB,UAAU,EAAE,KAAK;IACjB,KAAK,EAAE,IAAI;IACX,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,MAAM;IAChB,aAAa,EAAE,GAAG,GAKnB;ICVC,MAAM,EAAE,SAAS,EAAE,QAAQ;MDD7B,AAAC,uCAAiB,CAAC;QASf,MAAM,EAAE,MAAM,GAEjB;EAED,AAAC,2BAAK,CAAC;IACL,SAAS,EAAE,IAAI;IACf,KAAK,EAAE,IAAI,GACZ;EAGD,AAAC,4BAAM,CAAC;IACN,OAAO,EAAE,KAAK;IACd,UAAU,EAAE,KAAK,GAClB","file":"rating-image-right.css","sourceRoot":"../widget","sourcesContent":["@import \"../core/bootstrap\";\n\n.rc-rating-image-right {\n  position: relative;\n  padding: 0 20px;\n  background: #efefef;\n  border: 2px dotted #e3e3e3;\n  border-radius: 0 50px;\n\n  @include media-breakpoint-down(sm) {\n    padding: 0;\n  }\n\n  &__container {\n    padding: 10px;\n    display: flex;\n    align-items: center;\n\n    @include media-breakpoint-down(sm) {\n      display: block;\n    }\n  }\n\n  &__content {\n    width: calc(100% - 300px);\n    padding: 50px 40px 50px 40px;\n    position: relative;\n\n    @include media-breakpoint-down(sm) {\n      width: calc(100% - 80px);\n      padding: 0 40px 40px 40px;\n    }\n\n    &:before,\n    &:after {\n      position: absolute;\n      font-size: 60px;\n    }\n\n    &:before {\n      content: '„';\n      left: 0;\n      top: 0;\n\n      @include media-breakpoint-down(sm) {\n        top: -60px;\n      }\n    }\n\n\n    &:after {\n      content: '“';\n      right: 0;\n      bottom: 0;\n    }\n\n    p {\n      font-size: 22px;\n      font-family: Verdana, sans-serif;\n      line-height: 28px;\n      font-style: italic;\n    }\n  }\n\n  &__image {\n    width: 300px;\n\n    @include media-breakpoint-down(sm) {\n      width: 100%;\n    }\n  }\n\n  &__image-container {\n    max-width: 300px;\n    max-height: 300px;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    border-radius: 50%;\n\n    @include media-breakpoint-down(sm) {\n      margin: 0 auto;\n    }\n  }\n\n  &__img {\n    max-width: 100%;\n    width: 100%;\n  }\n\n\n  &__name {\n    display: block;\n    text-align: right;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}